use sqlx::SqlitePool;

/// Run database migrations
pub async fn run_migrations(pool: &SqlitePool) -> Result<(), sqlx::migrate::MigrateError> {
    println!("ðŸ”„ Running database migrations...");

    sqlx::migrate!("./migrations").run(pool).await?;

    println!("âœ… Database migrations completed successfully!");
    Ok(())
}

/// Verify that the database tables exist and are accessible
pub async fn test_database_structure(pool: &SqlitePool) -> Result<(), sqlx::Error> {
    println!("ðŸ§ª Testing database structure...");

    // Test that we can query each table (should return 0 rows initially)
    let user_count: (i64,) = sqlx::query_as("SELECT COUNT(*) FROM users")
        .fetch_one(pool)
        .await?;

    let module_count: (i64,) = sqlx::query_as("SELECT COUNT(*) FROM modules")
        .fetch_one(pool)
        .await?;

    let class_count: (i64,) = sqlx::query_as("SELECT COUNT(*) FROM classes")
        .fetch_one(pool)
        .await?;

    println!("ðŸ“Š Database state:");
    println!("   ðŸ‘¥ Users: {}", user_count.0);
    println!("   ðŸ“š Modules: {}", module_count.0);
    println!("   ðŸŽ“ Classes: {}", class_count.0);
    println!("âœ… Database structure test successful!");

    Ok(())
}
